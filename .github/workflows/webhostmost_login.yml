name: WebHostMost Auto Login

on:
  schedule:
    # 每天的 00:30 UTC 时间执行 (北京时间 08:30)
    - cron: '30 0 * * *'
    # 每天的 20:25 UTC 时间执行 (北京时间第二天 04:25)
    - cron: '25 20 * * *'
  workflow_dispatch: # 允许手动触发

jobs:
  auto-login:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Perform Login, Access URL, and Execute Node.js Selector Request
        env:
          WEBHOST_USERNAME: ${{ secrets.WEBHOST_USERNAME }}
          WEBHOST_PASSWORD: ${{ secrets.WEBHOST_PASSWORD }}
          NODEJS_USER: ${{ secrets.NODEJS_USER }}
        run: |
          echo "Attempting to log in to WebHostMost..."
          
          # 执行登录请求
          # 确保用于续行的每个反斜杠 (\) 都是其所在行的绝对最后一个字符
          LOGIN_RESPONSE_HTTP_CODE=$(curl -s -X POST \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -H "User-Agent: Mozilla/5.0 (GitHub Action) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36" \
            -H "Origin: https://server7.webhostmost.com:2222" \
            -H "Referer: https://server7.webhostmost.com:2222/evo/login" \
            -d "{\"username\":\"$WEBHOST_USERNAME\",\"password\":\"$WEBHOST_PASSWORD\"}" \
            --cookie-jar cookies.txt \
            -D login_headers.txt \
            --output response.json \
            --write-out "%{http_code}" \
            https://server7.webhostmost.com:2222/api/login)
          
          echo "Login HTTP Status Code: $LOGIN_RESPONSE_HTTP_CODE"
          echo "Login Response Body:"
          cat response.json
          echo "" # 换行以提高可读性

          if [ "$LOGIN_RESPONSE_HTTP_CODE" -ne 200 ]; then
            echo "Login failed with HTTP status code: $LOGIN_RESPONSE_HTTP_CODE"
            echo "Login Headers:"
            cat login_headers.txt # 打印头信息以帮助调试
            exit 1
          fi

          # 检查 response.json 是否为空或无效
          if [ ! -s response.json ]; then
            echo "Login response body is empty or invalid."
            exit 1
          fi
          
          # 确保 jq 可用 (通常在 GitHub runner 上已预装)
          # 如果需要，可以取消下面这行的注释来安装 jq:
          # sudo apt-get update && sudo apt-get install -y jq

          # 从登录响应体中提取 sessionID 和 loginURL (原有逻辑)
          SESSION_ID_FROM_BODY=$(jq -r '.sessionID' response.json)
          LOGIN_URL=$(jq -r '.loginURL' response.json)
          
          # 从登录响应头中提取 session 值 (新需求)
          SESSION_VALUE_FROM_HEADER=$(grep -i '^Set-Cookie: session=' login_headers.txt | sed -E 's/.*session=([^;]+);.*/\1/' | head -n 1)

          if [ -z "$SESSION_VALUE_FROM_HEADER" ]; then
            echo "Failed to extract session from login headers."
            echo "Login Headers Content:"
            cat login_headers.txt
            # 如果后续请求严格依赖此session，考虑在此处退出
            # exit 1 
          else
            echo "Extracted session from header for new request: $SESSION_VALUE_FROM_HEADER"
          fi
          
          if [ "$SESSION_ID_FROM_BODY" = "null" ] || [ -z "$SESSION_ID_FROM_BODY" ] || [ "$LOGIN_URL" = "null" ] || [ -z "$LOGIN_URL" ]; then
            echo "Login failed: Could not extract sessionID (from body) or loginURL from response."
            echo "SessionID (from body): $SESSION_ID_FROM_BODY"
            echo "LoginURL: $LOGIN_URL"
            exit 1
          else
            echo "Login successful (extracted from body)!"
            echo "SessionID (from body): $SESSION_ID_FROM_BODY"
            echo "LoginURL: $LOGIN_URL"
            echo "Attempting to access loginURL..."
            ACCESS_RESPONSE_HTTP_CODE=$(curl -s -L \
              -b cookies.txt \
              -H "User-Agent: Mozilla/5.0 (GitHub Action) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36" \
              -H "Referer: https://server7.webhostmost.com:2222/api/login" \
              "$LOGIN_URL" \
              -o /dev/null \
              -w "%{http_code}")
            
            echo "Access loginURL HTTP Status Code: $ACCESS_RESPONSE_HTTP_CODE"
            if [[ "$ACCESS_RESPONSE_HTTP_CODE" -ge 200 && "$ACCESS_RESPONSE_HTTP_CODE" -lt 400 ]]; then
              echo "Successfully accessed loginURL."
            else
              echo "Failed to access loginURL. Status code: $ACCESS_RESPONSE_HTTP_CODE"
            fi
          fi

          # --- 新增的 POST 请求逻辑 ---
          echo ""
          echo "Attempting to execute Node.js Selector request..."

          if [ -z "$NODEJS_USER" ]; then
            echo "Error: NODEJS_USER secret is not set. Skipping Node.js Selector request."
          elif [ -z "$SESSION_VALUE_FROM_HEADER" ]; then
            # 对于新的POST请求，我们必须使用从header中提取的session
            echo "Error: Session from header is missing for Node.js Selector request. Skipping request."
          else
            POST_DATA="command=cloudlinux-selector&method=get&params[interpreter]=nodejs&params[user]=$NODEJS_USER&csrftoken=1"
            
            echo "Executing Node.js Selector POST request..."
            # 执行新的 POST 请求，并将响应体保存到 nodejs_selector_response.json
            curl -s -X POST \
              -H "Host: server7.webhostmost.com:2222" \
              -H "Cookie: csrftoken=1; session=$SESSION_VALUE_FROM_HEADER" \
              -H "X-Csrftoken: 1" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              -d "$POST_DATA" \
              -o nodejs_selector_response.json \
              https://server7.webhostmost.com:2222/CMD_PLUGINS/nodejs_selector/index.raw?c=send-request
            
            echo "Node.js Selector Request executed."
            # 检查 nodejs_selector_response.json 是否创建成功且有内容
            if [ -s nodejs_selector_response.json ]; then
              echo "Response Body (saved to nodejs_selector_response.json):"
              cat nodejs_selector_response.json
              echo ""

              # 从返回的 JSON 中提取 "domain" 字段的值
              DOMAIN_VALUE=$(jq -r --arg user "$NODEJS_USER" 'first(.available_versions[].users[$user].applications[].domain // empty)' nodejs_selector_response.json)

              if [ -n "$DOMAIN_VALUE" ] && [ "$DOMAIN_VALUE" != "null" ]; then
                echo "Successfully extracted domain value:"
                echo "$DOMAIN_VALUE" # 直接打印到控制台
              else
                echo "Could not extract 'domain' value or it was null/empty from Node.js Selector response."
                echo "Queried for user: $NODEJS_USER"
              fi
            else
              echo "Node.js Selector request did not produce a response body or the response was empty."
            fi
          fi
          
          echo "Cleaning up temporary files..."
          rm -f response.json cookies.txt login_headers.txt nodejs_selector_response.json
